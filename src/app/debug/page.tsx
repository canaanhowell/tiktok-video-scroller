'use client'

import { useState, useEffect } from 'react'
import { VideoScrollerFresh } from '@/components/video/VideoScrollerFresh'
import { Typography } from '@/components/ui/Typography'
import { AlertCircle, CheckCircle, Download, Play, RefreshCw, TestTube } from 'lucide-react'

// Test videos from the main page
const testVideos = [
  {
    id: 'b5a4dfe3-2bc7-4fa3-a6dd-3ec36aceff8f',
    src: 'https://vz-97606b97-31d.b-cdn.net/b5a4dfe3-2bc7-4fa3-a6dd-3ec36aceff8f/playlist.m3u8',
    username: 'synthetikmedia',
    description: 'Romance Wedding Video 1 üíï',
    likes: 1234,
    comments: 56,
    shares: 12,
  },
  {
    id: '755f7bdc-2026-4037-b15d-469397e29010',
    src: 'https://vz-97606b97-31d.b-cdn.net/755f7bdc-2026-4037-b15d-469397e29010/playlist.m3u8',
    username: 'synthetikmedia',
    description: 'Romantic Moments üíç',
    likes: 5678,
    comments: 234,
    shares: 89,
  },
  {
    id: '533f6ad4-cf07-4846-b232-c7f79dce11a5',
    src: 'https://vz-97606b97-31d.b-cdn.net/533f6ad4-cf07-4846-b232-c7f79dce11a5/playlist.m3u8',
    username: 'synthetikmedia',
    description: 'Wedding Celebration üéä',
    likes: 9012,
    comments: 345,
    shares: 123,
  }
]

export default function DebugPage() {
  const [activeTab, setActiveTab] = useState<'player' | 'diagnostics' | 'logs'>('diagnostics')
  const [isRunningDiagnostics, setIsRunningDiagnostics] = useState(false)
  const [diagnosticResults, setDiagnosticResults] = useState<any[]>([])
  const [apiTest, setApiTest] = useState<any>(null)
  const [manifestTests, setManifestTests] = useState<any[]>([])

  // Run basic video diagnostics
  const runDiagnostics = async () => {
    setIsRunningDiagnostics(true)
    setDiagnosticResults([])
    setApiTest(null)
    setManifestTests([])

    try {
      // Simple video URL accessibility test
      console.log('Testing video URLs...')
      const urlResults = await Promise.all(
        testVideos.map(async (video, index) => {
          try {
            const startTime = Date.now()
            const response = await fetch(video.src, { method: 'HEAD' })
            const endTime = Date.now()
            
            return {
              id: video.id,
              index: index + 1,
              accessible: response.ok,
              status: response.status,
              statusText: response.statusText,
              responseTime: endTime - startTime,
              corsEnabled: response.headers.get('access-control-allow-origin') !== null
            }
          } catch (error) {
            return {
              id: video.id,
              index: index + 1,
              accessible: false,
              status: 0,
              statusText: 'Network Error',
              responseTime: 0,
              corsEnabled: false,
              error: error instanceof Error ? error.message : 'Unknown error'
            }
          }
        })
      )
      setDiagnosticResults(urlResults)

      // Set simple API test result
      setApiTest({
        accessible: urlResults.some(r => r.accessible),
        status: 'Basic connectivity test completed',
        responseTime: urlResults.reduce((avg, r) => avg + r.responseTime, 0) / urlResults.length
      })

    } catch (error) {
      console.error('Diagnostics failed:', error)
    } finally {
      setIsRunningDiagnostics(false)
    }
  }

  // Download diagnostic report
  const downloadReport = () => {
    const report = `Video Diagnostics Report - ${new Date().toISOString()}
==============================================

API Test: ${apiTest ? JSON.stringify(apiTest, null, 2) : 'No data'}

URL Test Results:
${diagnosticResults.map(r => `
Video ${r.index} (${r.id}):
  Accessible: ${r.accessible}
  Status: ${r.status} ${r.statusText}
  Response Time: ${r.responseTime}ms
  CORS Enabled: ${r.corsEnabled}
  ${r.error ? `Error: ${r.error}` : ''}
`).join('\n')}

Generated by TikTok Video Scroller Debug Tool`

    const blob = new Blob([report], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `video-diagnostic-report-${Date.now()}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  // Download video logs (simplified)
  const downloadVideoLogs = () => {
    const logs = `Video Player Logs - ${new Date().toISOString()}
==============================================

Console logs from browser developer tools contain
detailed information about video loading events.

To access:
1. Open browser Developer Tools (F12)
2. Go to Console tab
3. Look for logs prefixed with [FRESH]

Generated by TikTok Video Scroller Debug Tool`

    const blob = new Blob([logs], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `video-logs-${Date.now()}.txt`
    a.click()
    URL.revokeObjectURL(url)
  }

  return (
    <div className="min-h-screen bg-black text-white">
      <div className="container mx-auto px-4 py-8">
        <div className="flex flex-col lg:flex-row gap-8">
          {/* Left Panel - Controls */}
          <div className="lg:w-1/3">
            <div className="bg-gray-900 rounded-lg p-6">
              <Typography variant="h2" className="text-white mb-4">
                Video Debug Console
              </Typography>
              
              {/* Tab Navigation */}
              <div className="flex gap-2 mb-6">
                <button
                  onClick={() => setActiveTab('diagnostics')}
                  className={`px-4 py-2 rounded text-sm font-medium transition-colors ${
                    activeTab === 'diagnostics'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
                >
                  <TestTube className="w-4 h-4 inline mr-2" />
                  Diagnostics
                </button>
                <button
                  onClick={() => setActiveTab('player')}
                  className={`px-4 py-2 rounded text-sm font-medium transition-colors ${
                    activeTab === 'player'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
                >
                  <Play className="w-4 h-4 inline mr-2" />
                  Player
                </button>
                <button
                  onClick={() => setActiveTab('logs')}
                  className={`px-4 py-2 rounded text-sm font-medium transition-colors ${
                    activeTab === 'logs'
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                  }`}
                >
                  üìã Logs
                </button>
              </div>

              {/* Diagnostics Tab */}
              {activeTab === 'diagnostics' && (
                <div className="space-y-4">
                  <div className="flex gap-2">
                    <button
                      onClick={runDiagnostics}
                      disabled={isRunningDiagnostics}
                      className="flex-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 text-white px-4 py-2 rounded font-medium transition-colors"
                    >
                      {isRunningDiagnostics ? (
                        <>
                          <RefreshCw className="w-4 h-4 inline mr-2 animate-spin" />
                          Running...
                        </>
                      ) : (
                        <>
                          <TestTube className="w-4 h-4 inline mr-2" />
                          Run Diagnostics
                        </>
                      )}
                    </button>
                    <button
                      onClick={downloadReport}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded font-medium transition-colors"
                    >
                      <Download className="w-4 h-4" />
                    </button>
                  </div>

                  {/* API Test Results */}
                  {apiTest && (
                    <div className="bg-gray-800 rounded p-4">
                      <h3 className="font-bold mb-2 flex items-center">
                        {apiTest.accessible ? (
                          <CheckCircle className="w-5 h-5 text-green-500 mr-2" />
                        ) : (
                          <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
                        )}
                        Bunny CDN API Test
                      </h3>
                      <div className="text-sm space-y-1">
                        <div>Status: {apiTest.status}</div>
                        <div>Response Time: {apiTest.responseTime?.toFixed(0)}ms</div>
                        {apiTest.error && <div className="text-red-400">Error: {apiTest.error}</div>}
                        {apiTest.libraryInfo && (
                          <div>Library: {apiTest.libraryInfo.Name}</div>
                        )}
                      </div>
                    </div>
                  )}

                  {/* URL Test Results */}
                  {diagnosticResults.length > 0 && (
                    <div className="bg-gray-800 rounded p-4">
                      <h3 className="font-bold mb-2">Video URL Tests</h3>
                      <div className="space-y-2">
                        {diagnosticResults.map((result, index) => (
                          <div key={index} className="text-sm border-l-4 border-gray-600 pl-3">
                            <div className="flex items-center gap-2">
                              {result.accessible ? (
                                <CheckCircle className="w-4 h-4 text-green-500" />
                              ) : (
                                <AlertCircle className="w-4 h-4 text-red-500" />
                              )}
                              <span className="font-medium">Video {result.index}</span>
                            </div>
                            <div className="text-gray-300">
                              Status: {result.status} {result.statusText}
                            </div>
                            <div className="text-gray-300">
                              Response Time: {result.responseTime?.toFixed(0)}ms
                            </div>
                            <div className="text-gray-300">
                              CORS: {result.corsEnabled ? 'Enabled' : 'Disabled'}
                            </div>
                            {result.error && (
                              <div className="text-red-400">Error: {result.error}</div>
                            )}
                          </div>
                        ))}
                      </div>
                    </div>
                  )}

                </div>
              )}

              {/* Logs Tab */}
              {activeTab === 'logs' && (
                <div className="space-y-4">
                  <div className="flex gap-2">
                    <button
                      onClick={downloadVideoLogs}
                      className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded font-medium transition-colors"
                    >
                      <Download className="w-4 h-4 inline mr-2" />
                      Download Logs
                    </button>
                  </div>

                  <div className="bg-gray-800 rounded p-4">
                    <h3 className="font-bold mb-2">Video Player Logs</h3>
                    <div className="text-sm text-gray-300">
                      <p className="mb-2">
                        Video logs are now available in the browser console. 
                        Open Developer Tools (F12) and look for logs prefixed with <code className="bg-gray-700 px-1 rounded">[FRESH]</code>.
                      </p>
                      <p className="mb-2">Common log types you'll see:</p>
                      <ul className="list-disc pl-5 space-y-1">
                        <li><code className="bg-gray-700 px-1 rounded">[FRESH] Setting up video N</code> - Video initialization</li>
                        <li><code className="bg-gray-700 px-1 rounded">[FRESH] Using HLS.js for video N</code> - HLS setup</li>
                        <li><code className="bg-gray-700 px-1 rounded">[FRESH] HLS ready for video N</code> - Video ready to play</li>
                        <li><code className="bg-gray-700 px-1 rounded">[FRESH] Playing video N</code> - Video playback started</li>
                        <li><code className="bg-gray-700 px-1 rounded">[FRESH] Changed to video N</code> - User scrolled to different video</li>
                      </ul>
                    </div>
                  </div>
                </div>
              )}
            </div>
          </div>

          {/* Right Panel - Video Player or Instructions */}
          <div className="lg:w-2/3">
            {activeTab === 'player' ? (
              <div className="bg-gray-900 rounded-lg overflow-hidden" style={{ height: '80vh' }}>
                <VideoScrollerFresh videos={testVideos} />
              </div>
            ) : (
              <div className="bg-gray-900 rounded-lg p-6">
                <Typography variant="h3" className="text-white mb-4">
                  Debug Instructions
                </Typography>
                <div className="space-y-4 text-gray-300">
                  <div>
                    <h4 className="font-bold text-white mb-2">üîç Diagnostics Tab</h4>
                    <p>
                      Run comprehensive tests to check CDN accessibility, CORS configuration, 
                      and HLS manifest validity. This will help identify network-level issues.
                    </p>
                  </div>
                  <div>
                    <h4 className="font-bold text-white mb-2">üì± Player Tab</h4>
                    <p>
                      Test the actual video player using the working VideoScrollerFresh component.
                      Check browser console (F12) for real-time video loading information prefixed with [FRESH].
                    </p>
                  </div>
                  <div>
                    <h4 className="font-bold text-white mb-2">üìã Logs Tab</h4>
                    <p>
                      View detailed logs of all video loading events, errors, and performance metrics.
                      Download complete reports for further analysis.
                    </p>
                  </div>
                  <div>
                    <h4 className="font-bold text-white mb-2">üö® Common Issues</h4>
                    <ul className="list-disc pl-5 space-y-1">
                      <li><strong>403 Forbidden:</strong> CDN security settings or IP restrictions</li>
                      <li><strong>CORS Errors:</strong> Missing Access-Control-Allow-Origin headers</li>
                      <li><strong>Network Errors:</strong> DNS issues or CDN availability</li>
                      <li><strong>HLS Errors:</strong> Invalid manifest or unsupported browser</li>
                    </ul>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  )
}